name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"
  EKS_CLUSTER_NAME: "extravagant-dubstep-ladybug"
  APP_NAME: "fiap-mpeg-uploader"

jobs:

  unit-tests:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Change to your preferred version

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install your project dependencies
          pip install poetry
          # Install testing and coverage tools
          pip install pytest coverage
          # Install Dependencies
          poetry install

      # 4. Run tests and generate coverage report
      - name: Run tests and collect coverage
        run: |
          coverage run --append --source=fsutil setup.py test

      # 5. Run SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          organization: ${{ secrets.SONAR_ORGANIZATION }}
          projectKey: ${{ secrets.SONAR_PROJECT_KEY }}
          # Pass additional arguments if needed (here we specify the coverage file)
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build Docker Image  
    needs: unit-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Docker
        run: |
          docker-compose build --build-arg awsAccessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }} --build-arg awsSecretAccessKey=${{ secrets.AWS_SECRET_ACCESS_KEY }} --build-arg awsSessionToken=${{ secrets.AWS_SESSION_TOKEN }} uploader

      - name: Get Docker Image ID
        id: image_id
        run: echo "::set-output name=image_id::$(docker images | grep uploader | awk '{print $3}' | uniq)"

      - name: Get AWS Account ID
        id: aws_account
        run: echo "::set-output name=account_id::$(aws sts get-caller-identity --query Account --output text)"

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Tag Docker Image
        run: docker tag ${{ steps.image_id.outputs.image_id }} ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}:1.0

      - name: Push Docker Image to ECR
        run: docker push ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.APP_NAME }}:1.0

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}


  deploy:
    name: Deploy Image EKS  
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.30.2'
        id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Destroying EKS
        run: |
          kubectl delete --ignore-not-found=true -f infra/cm/.
          kubectl delete --ignore-not-found=true -f infra/secrets/.
          kubectl delete --ignore-not-found=true -f infra/deployment/.

      - name: Recreating EKS
        run: |
          kubectl apply --validate=false -f infra/svc/.
          kubectl apply --validate=false -f infra/cm/.
          kubectl apply --validate=false -f infra/secrets/.
          kubectl apply --validate=false -f infra/deployment/.
          kubectl apply --validate=false -f infra/hpa/. 